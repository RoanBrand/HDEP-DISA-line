FUNCTION_BLOCK fbBlowoffStation
TITLE = 'Blowoff Station'
VERSION : '1.2'
KNOW_HOW_PROTECT
AUTHOR : 'RF Brand'
//****************************//
VAR_INPUT
(* Physical Inputs *)
    iButton_Index : BOOL;   // Button used to initiate product transport
    iButton_Aux : BOOL; // Alternative Function Button.
    iButton_EStop : BOOL; // Local EStop button
    iEStop_Global : BOOL;   // EStop Condition due to safety system.
    iPS : BOOL; // Rectoflective optical sensor
    iVSD_Rollers_Ready : BOOL;  // VSD Health Signals
    iClock : BOOL;  // Clock pulse signal used for flickering indications
    
    F_Piston_Large_Hor : BOOL;  // Feedback sensors
    F_Piston_Large_Ver : BOOL;
    F_Edge_Clamp_Released : BOOL;
    F_Edge_Clamp_Up : BOOL;
    F_Piston_Lock_Unlocked : BOOL;
    F_Piston_Lock_Locked : BOOL;
    F_Piston_TC_Locked : BOOL;
    F_Piston_TC_Released : BOOL;
    
(* Inter-Conveyor Messages *)                                           //      2     ^
    iNeigh_1 : INT; // Def as prev conv that this conv receives from.   //      |     |
    iNeigh_2 : INT; // Def as next conv to send to from home pos.       //   3-[C]-4  ^
                                                                        //      |     |
                                                                        //      1     ^
    //  0-Nothing
    //  1-AbletoReceive
    //  2-YouMaySend
    //  3-ReqtoSend
    //  4-ProductCleared
    //  5-SendingProduct
    //  6-ProductReceived
    //  7-ProductTooEarly
    //  9-CancelTransaction
    //  10-EStop
    
(* HMI *)
    iManual_Mode_Req : BOOL;    // User Request Manual Control of conveyor

(* Settings *)
    xConv_Behav : INT;  (* SPECIFY CONVEYOR BEHAVIOUR: *)
                        // 0-Basic 'Push to Go' Conveyor;
                        // 1-Automatic Pass on Product without user
                        // 2-CycleMode
                        
    xSkip_Tilt : BOOL;  // Skpi the tliting process.
    xWorker_Absent : BOOL;  // No button needs to be pressed every cycle for this conv
END_VAR
VAR_OUTPUT
(* Physical Outputs *)
    oMotor_Rollers_Fwd : BOOL;  // Standard Conveyor Rollers
    oMotor_Rollers_Rev : BOOL;
    
    oLamp_Indication : BOOL;    // Status lights
    oLamp_Warning : BOOL;
    oLamp_Fault : BOOL;
    
    //  Pneumatic actuators
    Piston_Lock : BOOL;         // True: Unlocked
    Piston_Top_Clamp : BOOL;    // True: Block clamped
    Piston_Edge_Clamp : BOOL;   // True: Block clamped
    Piston_Large_Up : BOOL;
    Piston_Large_Down : BOOL;
    Blower_Turn : BOOL;
    Blower_Activate1 : BOOL;     // True: Blow air 1
    Blower_Activate2 : BOOL;     // True: Blow air 2

(* Inter-Conveyor Messages *)
    oNeigh_1 : INT;
    oNeigh_2 : INT;

(* Alarms *)
    oAlarmsOut : WORD;
    oAlarms AT oAlarmsOut : ARRAY[0..15] OF BOOL;
(*  oAlarms[0]  ->  "Cancel Receive Process: Prev Conv not Sending"
    oAlarms[1]  ->  "Momentary Obstruction: Photosensor broken and remade too fast"
    oAlarms[2]  ->  "Send Timeout: "Product stuck on Conveyor"
    oAlarms[3]  ->  "Obstruction on next Conv while Sending"
    oAlarms[4]  ->  "Obstruction on Conv while sending"
    oAlarms[8]  ->  "Unable to secure product with Edge Clamp during cleaning cycle"
    oAlarms[9]  ->  "Unable to secure product with Top Clamp during cleaning cycle"
    oAlarms[10] ->  "Unable to retract Piston Lock to start cleaning cycle"
    oAlarms[11] ->  "Unable to confirm if blowoffstation vertical during cleaning cycle"
    oAlarms[12] ->  "Unable to confirm if blowoffstation horizontal during cleaning cycle"
    oAlarms[13] ->  "Unable to extend Piston Lock to secure blowoffstation"
    oAlarms[14] ->  "Unable to release product at end of cleaning cycle"
    oAlarms[15] ->  "Unable to release product and extend Piston Lock to secure conveyor" *)
END_VAR
VAR
    oldState : INT;         (* FINITE STATE MACHINE FOR CONVEYOR*)
    State : INT;    // Finite State Machine for Conveyor:
                    // 0-RESET; 1-ABLETORECEIVE; 2-RECEIVING; 3-RECEIVEDPRODUCT;
                    // 4-PRODUCTLOADEDMANUALLY; 5-POSITIONCONVDHS; 6-POSITIONCONVSEND;
                    // 7-POSITIONCONVHOME; 8-ABLETOSEND; 9-REQUESTTOSEND;
                    // 10-NEXTCONVBUSY; 11-SENDING; 12-FINISHSEND; 13-RECEIVEWHILESENDING;
                    // 14-MANUALMODE; 15-HALTCONV; 16-ERROR:RECEIVE; 17-ERROR:SEND;
                    // 18-ERROR:POSITION;
                    
    internalState : INT;    // Sub Statemachine used in some states
    
    tTimer : SFB4; // IEC On-Delay timers used for timing sequences
    tPS_Debounce : SFB5;    // IEC Off-Delay Timer used for debouncing product sensor
    bLocal_Emergency : BOOL;    // Local EStop button was pressed
    bNeighbour_Emergency : BOOL;    // Neighbour EStop button was pressed
    bProduct_Cleaned : BOOL;
    
(* Check if photosensor is momentarily broken and remade in short time *)
    Momentary_obstruction : BOOL; // This can happen due to vibration or hand
    tMomentary : SFB4; // Used to make alarm
    
(* Manual Mode Button Control *)
    bManual_Field_Buttons : BOOL;
    bManual_HMI_Fwd : BOOL;
    bManual_HMI_Rev : BOOL;
    bOld_Fwd : BOOL;
    bOld_Rev : BOOL;

(* CycleMode VARs *)
    bReady_to_Part : BOOL;
END_VAR
BEGIN
(* Sensors *)
tPS_Debounce(IN := iPS, PT := t#200ms);

(* Machine Control Flow *)
IF iEStop_Global AND NOT (State = 15) THEN          // Emergency stop gets top priority in program
    bLocal_Emergency := false;
    bNeighbour_Emergency := false;
    State := 15;    // Goto HALT CONVEYOR
ELSIF NOT iVSD_Rollers_Ready THEN                   // After that VSD Failure
    State := 19;
ELSIF iManual_Mode_Req AND NOT (State = 14) THEN    // After that manual operation requests
    State := 14;    // Goto MANUAL MODE
END_IF;

CASE State OF
    0 : // STATE 0 - RESET
        IF oldState <> State THEN
            tTimer(IN := false);
            bReady_to_Part := false;
            oNeigh_1 := 0;
            oNeigh_2 := 0;
            oAlarmsOut := w#16#0; // 0x0000;
            oMotor_Rollers_Fwd := false;
            oMotor_Rollers_Rev := false;
            oLamp_Indication := false;
            oLamp_Warning := false;
            oLamp_Fault := false;
            IF NOT F_Piston_Large_Hor THEN
                Piston_Lock := true;
            END_IF;
            Piston_Large_Up := true;
            Piston_Large_Down := false;
            Blower_Turn := false;
            Blower_Activate1 := false;
            Blower_Activate2 := false;
            oldState := State;
        END_IF;
        tTimer(IN := true, PT := t#30s);
        oAlarms[15] := tTimer.Q;
        IF F_Piston_Large_Hor THEN
            Piston_Lock := false;
        END_IF;
        IF F_Piston_Lock_Locked AND F_Piston_Large_Hor THEN
            IF tPS_Debounce.Q THEN
                State := 4; // GOTO STANDBY
            ELSE
                State := 1; // GOTO ABLETORECEIVE
            END_IF;
        END_IF;
    1 : // STATE 1 - ABLETORECEIVE
        IF oldState <> State THEN
            oNeigh_1 := 1;
            bReady_to_Part := false;
            Piston_Top_Clamp := false;  // not clamped
            Piston_Edge_Clamp := false; // not clamped
            oLamp_Indication := true;
            oldState := State;
        END_IF;
        IF (iNeigh_1 = 3) THEN
            State := 2; // GOTO RECEIVING
        ELSIF tPS_Debounce.Q THEN
            State := 4; // GOTO STANDBY
        ELSIF (xConv_Behav = 2) THEN
            IF (iButton_Index OR xWorker_Absent) THEN
                bReady_to_Part := true;
            END_IF;
            oLamp_Warning := NOT bReady_to_Part;
        ELSIF xConv_Behav <> 2 THEN
            bReady_to_Part := false;
            oLamp_Warning := false;
        END_IF;
        IF oldState <> State THEN
            oNeigh_1 := 0;
            oLamp_Indication := false;
            oLamp_Warning := false;
        END_IF;
    2 : // STATE 2 - RECEIVING
        IF oldState <> State THEN
            tTimer(IN := false);
            internalState := 0;
            oNeigh_1 := 2;
            oMotor_Rollers_Fwd := true;
            oLamp_Warning := true;
            oldState := State;
        END_IF;
        CASE internalState OF
            0 : tTimer(IN := true, PT := t#1s);
                IF tTimer.Q THEN                                // Prev conv did not send
                    tTimer(IN := false);
                    oNeigh_1 := 9;          // Cancel operation
                    oAlarms[0] := true;     // Generate HMI Alarm 1
                    oMotor_Rollers_Fwd := false;
                    internalState := 10;
                ELSIF iNeigh_1 = 5 THEN                         // Prev conv is sending
                    tTimer(IN := false);
                    oNeigh_1 := 0;          
                    internalState := 1;
                END_IF;
            1 : tTimer(IN := true, PT := t#4s);
                IF tTimer.Q THEN                                // Product on its way
                    internalState := 2;
                ELSIF tPS_Debounce.Q THEN                       // Product arrived too early
                    oNeigh_1 := 7;  // Tell prev conv product arrived too early
                    oMotor_Rollers_Fwd := false;
                    internalState := 11;
                ELSIF (iNeigh_1 <> 5) AND (iNeigh_1 <> 4) THEN  // Prev conv not sending
                    State := 4; // GOTO STANDBY
                END_IF;
            2 : IF tPS_Debounce.Q THEN                          // Assume product has arrived
                    State := 3; // GOTO RECEIVED
                ELSIF (iNeigh_1 <> 5) AND (iNeigh_1 <> 4) THEN  // Prev conv not sending
                    State := 4; // GOTO STANDBY
                END_IF;
           10 : tTimer(IN := true, PT := t#2s); // Wait
                IF tTimer.Q THEN
                    State := 4; // GOTO STANDBY
                END_IF;
           11 : tTimer(IN := true, PT := t#550ms);  // Early Receive. Error by Prev Conv.
                IF NOT iPS THEN
                    Momentary_obstruction := true;
                    State := 4; // GOTO STANDBY
                ELSIF tTimer.Q THEN
                    State := 4; // GOTO STANDBY
                END_IF;
        END_CASE;
        IF iNeigh_1 = 9 THEN
            State := 4; // GOTO STANDBY
        END_IF;    
        IF oldState <> State THEN
            oNeigh_1 := 0;
            oAlarms[0] := false;
            oMotor_Rollers_Fwd := false;
            oLamp_Warning := false;
        END_IF;
    3 : // RECEIVED
        IF oldState <> State THEN
            tTimer(IN := false);
            oNeigh_1 := 6;
            bProduct_Cleaned := false;
            oLamp_Indication := true;
            oldState := State;
        END_IF;
        tTimer(IN := true, PT := t#500ms);
        IF tTimer.Q THEN
            IF xSkip_Tilt THEN
                State := 8; // GOTO ABLETOSEND
            ELSE
                State := 100;   // GOTO TILTING
            END_IF;
        END_IF;
        IF oldState <> State THEN
            oNeigh_1 := 0;
            oLamp_Indication := false;
        END_IF;
    4 : // STANDBY
        IF tPS_Debounce.Q THEN
            IF bProduct_Cleaned OR xSkip_Tilt THEN
                State := 8; // GOTO ABLETOSEND
            ELSE
                State := 100;   // GOTO TILTING
            END_IF;
        ELSE
            State := 1; // GOTO ABLETORECEIVE
        END_IF;
  100 : // TILTING
        IF oldState <> State THEN
            tTimer(IN := false);
            internalState := 0;
            Piston_Edge_Clamp := true;  // clamp
            oMotor_Rollers_Rev := true;
            oLamp_Warning := true;
            oldState := State;
        END_IF;
        oLamp_Warning := iClock;
        CASE internalState OF
            0 : tTimer(IN := true, PT := t#1.8s);   // Reverse block a bit
                IF tTimer.Q THEN
                    tTimer(IN := false);
                    oMotor_Rollers_Rev := false;
                    IF F_Edge_Clamp_Up THEN
                        Piston_Top_Clamp := true;   // clamp
                        internalState := 1;
                    ELSE
                        tTimer(IN := false);
                        oAlarms[8] := true;
                        internalState := 15;
                    END_IF;
                END_IF;
            1 : tTimer(IN := true, PT := t#2s);     // Check if block clamped and remove lock
                IF F_Piston_TC_Locked THEN
                    tTimer(IN := false);
                    Piston_Lock := true;    // unlock
                    internalState := 2;
                ELSIF tTimer.Q THEN
                    tTimer(IN := false);
                    oAlarms[9] := true;
                    internalState := 15;
                END_IF;
            2 : tTimer(IN := true, PT := t#5s);     // Wait for lock and tilt block 90deg
                IF F_Piston_Lock_Unlocked THEN
                    tTimer(IN := false);
                    Piston_Large_Up := false;
                    Piston_Large_Down := true;
                    internalState := 3;  
                ELSIF tTimer.Q THEN
                    tTimer(IN := false);
                    oAlarms[10] := true;
                    internalState := 15;
                END_IF;
            3 : tTimer(IN := true, PT := t#20s);    // Wait for tilt and blowout block
                IF F_Piston_Large_Ver THEN
                    tTimer(IN := false);
                    Blower_Activate1 := true;
                    Blower_Turn := true;
                    internalState := 4;
                ELSIF tTimer.Q THEN
                    tTimer(IN := false);
                    oAlarms[11] := true;
                    internalState := 15;
                END_IF;
            4 : tTimer(IN := true, PT := t#8s);     // Blow 1
                IF tTimer.Q = true THEN
                    tTimer(IN := false);
                    Blower_Activate1 := false;
                    internalState := 5;
                END_IF;
            5 : tTimer(IN := true, PT := t#250ms);
                IF tTimer.Q THEN
                    tTimer(IN := false);
                    Blower_Activate2 := true;
                    internalState := 6;
                END_IF;
            6 : tTimer(IN := true, PT := t#8s);     // Blow 2
                IF tTimer.Q THEN
                    tTimer(IN := false);
                    bProduct_Cleaned := true;
                    Blower_Turn := false;
                    Blower_Activate2 := false;
                    Piston_Large_Up := true;
                    Piston_Large_Down := false;
                    internalState := 7;
                END_IF;
            7 : tTimer(IN := true, PT := t#30s);    // Wait for uptilt and set lock
                IF F_Piston_Large_Hor THEN
                    tTimer(IN := false);
                    internalState := 8;
                ELSIF tTimer.Q THEN
                    tTimer(IN := false);
                    oAlarms[12] := true;
                    internalState := 15;
                END_IF;
            8 : tTimer(IN := true, PT := t#2s);     // Wait for hole to align
                IF tTimer.Q THEN
                    tTimer(IN := false);
                    Piston_Lock := false;   // lock
                    internalState := 9;
                END_IF;
            9 : tTimer(IN := true, PT := t#5s);     // Wait for lock and release clamps
                IF F_Piston_Lock_Locked THEN
                    tTimer(IN := false);
                    Piston_Edge_Clamp := false; // unclamp
                    Piston_Top_Clamp := false;  // unclamp
                    internalState := 10;
                ELSIF tTimer.Q THEN
                    tTimer(IN := false);
                    oAlarms[13] := true;
                    internalState := 15;
                END_IF;
           10 : tTimer(IN := true, PT := t#5s);     // Wait for clamps and goto next state
                IF F_Edge_Clamp_Released AND F_Piston_TC_Released THEN
                    tTimer(IN := false);
                    State := 8; // ABLE TO SEND
                ELSIF tTimer.Q THEN
                    tTimer(IN := false);
                    oAlarms[14] := true;
                    internalState := 15;
                END_IF;
           15 : tTimer(IN := true, PT := t#2s);     // Show alarm and cancel tilt
                IF NOT F_Piston_Large_Hor THEN
                    Piston_Lock := true; // unlock
                END_IF;
                Piston_Large_Up := true;
                Piston_Large_Down := false;
                Blower_Turn := false;
                Blower_Activate1 := false;
                Blower_Activate2 := false;
                oLamp_Fault := true;
                IF tTimer.Q THEN
                    tTimer(IN := false);
                    oAlarms[8] := false; oAlarms[9] := false;
                    oAlarms[10] := false; oAlarms[11] := false;
                    oAlarms[12] := false; oAlarms[13] := false;
                    oAlarms[14] := false; internalState := 16;
                END_IF;
           16 : tTimer(IN := true, PT := t#30s);    // wait for tilt cancel
                IF F_Piston_Large_Hor THEN
                    Piston_Lock := false;   // lock
                    Piston_Top_Clamp := false;  // unlock
                    Piston_Edge_Clamp := false; // unlock
                END_IF;
                IF F_Piston_Lock_Locked AND F_Edge_Clamp_Released AND F_Piston_TC_Released THEN
                    State := 8; // ABLE TO SEND
                END_IF;
                oAlarms[15] := tTimer.Q;
        END_CASE;
    8 : // ABLETOSEND
        IF oldState <> State THEN
            tTimer(IN := false);
            internalState := 0;
            bReady_to_Part := false;
            oLamp_Indication := true;
            oldState := State;
        END_IF;
        CASE xConv_Behav OF
            0 : IF iButton_Index AND iNeigh_2 = 1 AND internalState = 0 THEN
                    internalState := 1;
                END_IF;
            1 : IF iNeigh_2 = 1 AND internalState = 0 THEN
                    internalState := 2;
                END_IF;
            2 : IF iNeigh_1 = 3 AND internalState <> 2 THEN
                    internalState := 2;
                    tTimer(IN := false);
                ELSIF iButton_Index OR xWorker_Absent THEN
                    bReady_to_Part := true;
                    oLamp_Warning := NOT bReady_to_Part;
                END_IF;
        END_CASE;
        IF xConv_Behav <> 2 THEN
            bReady_to_Part := false;
            oLamp_Warning := false;
        END_IF;
        CASE internalState OF
            0 : oNeigh_2 := 0;
            1 : IF NOT iButton_Index THEN
                    tTimer(IN := false);
                    internalState := 2;
                END_IF;       
            2 : tTimer(IN := true, PT := t#1s);
                oNeigh_2 := 3;
                IF tTimer.Q THEN
                    tTimer(IN := false);
                    internalState := 0;
                ELSIF iNeigh_2 = 2 THEN
                    IF xConv_Behav = 2 AND iNeigh_1 = 3 THEN
                        State := 13;
                    ELSE
                        State := 11;
                    END_IF;
                END_IF;
        END_CASE;
        IF NOT tPS_Debounce.Q THEN
            State := 1; // ABLETORECEIVE
        END_IF;
        IF oldState <> State THEN
            oLamp_Indication := false;
            oLamp_Warning := false;
        END_IF;
   11 : // SENDING
        IF oldState <> State THEN
            tTimer(IN := false);
            internalState := 0;
            oNeigh_2 := 5;
            oMotor_Rollers_Fwd := true;
            oLamp_Warning := true;
            oldState := State;
        END_IF;
        CASE internalState OF
            0 : tTimer(IN := true, PT := t#12s);
                IF tTimer.Q THEN
                    tTimer(IN := false);
                    oNeigh_2 := 9;  // Cancel operation
                    oAlarms[2] := true;
                    internalState := 10;
                ELSIF iNeigh_2 = 7 THEN
                    tTimer(IN := false);
                    oAlarms[3] := true;
                    internalState := 10;
                ELSIF NOT tPS_Debounce.Q THEN
                    oNeigh_2 := 4;
                    internalState := 1;
                END_IF;
            1 : tTimer(IN := true, PT := t#12s);
                IF tTimer.Q THEN
                    tTimer(IN := false);
                    oNeigh_2 := 9;  // Cancel operation
                    oAlarms[2] := true;
                    internalState := 10;
                ELSIF tPS_Debounce.Q THEN
                    tTimer(IN := false);
                    oNeigh_2 := 9;  // Cancel operation
                    oAlarms[4] := true;
                    internalState := 10;
                ELSIF iNeigh_2 = 6 THEN
                    State := 1; // GOTO ABLETORECEIVE
                END_IF;
           10 : tTimer(IN := true, PT := t#2s); // Wait
                oMotor_Rollers_Fwd := false;
                IF tTimer.Q THEN
                    State := 4; // GOTO STANDBY
                END_IF;
        END_CASE;
        IF oldState <> State THEN
            oNeigh_2 := 0;
            oAlarms[2] := false;
            oAlarms[3] := false;
            oAlarms[4] := false;
            oMotor_Rollers_Fwd := false;
            oLamp_Warning := false;
        END_IF;
   13 : // RECEIVEWHILESENDING
        IF oldState <> State THEN
            tTimer(IN := false);
            internalState := 0;
            oNeigh_1 := 2;
            oNeigh_2 := 5;
            oMotor_Rollers_Fwd := true;
            oLamp_Warning := true;
            oldState := State;
        END_IF;
        IF iNeigh_1 = 5 THEN
            oNeigh_1 := 0;
        END_IF;
        CASE internalState OF
            0 : tTimer(IN := true, PT := t#12s);
                IF tTimer.Q THEN
                    tTimer(IN := false);
                    oNeigh_2 := 9;  // Cancel operation
                    oAlarms[2] := true;
                    internalState := 10;
                ELSIF iNeigh_2 = 7 THEN   
                    tTimer(IN := false);
                    oAlarms[3] := true;
                    internalState := 10;
                ELSIF NOT tPS_Debounce.Q THEN
                    oNeigh_2 := 4;
                    internalState := 1;
                END_IF;
            1 : tTimer(IN := true, PT := t#12s);
                IF tTimer.Q THEN
                    tTimer(IN := false);
                    oNeigh_2 := 9;  // Cancel operation
                    oAlarms[2] := true;
                    internalState := 10;
                ELSIF (iNeigh_1 <> 5) AND (iNeigh_1 <> 4) THEN  // Prev conv not sending
                    State := 4; // GOTO STANDBY
                ELSIF tPS_Debounce.Q THEN
                    State := 3; // GOTO RECEIVED
                END_IF;
           10 : tTimer(IN := true, PT := t#2s); // Wait
                oMotor_Rollers_Fwd := false;
                IF tTimer.Q THEN
                    State := 4; // GOTO STANDBY
                END_IF;
        END_CASE;
        IF oldState <> State THEN
            oNeigh_1 := 0;
            oNeigh_2 := 0;
            oAlarms[2] := false;
            oAlarms[3] := false;
            oMotor_Rollers_Fwd := false;
            oLamp_Warning := false;
        END_IF;
   14 : // MANUAL
        IF oldState <> State THEN
            oNeigh_1 := 0;
            oNeigh_2 := 0;
            bManual_Field_Buttons := false;
            bManual_HMI_Fwd := false;
            bManual_HMI_Rev := false;
            oMotor_Rollers_Fwd := false;
            oMotor_Rollers_Rev := false;
            Blower_Turn := false;
            Blower_Activate1 := false;
            Blower_Activate2 := false;
            oLamp_Indication := true;
            oLamp_Warning := false;
            oLamp_Fault := true;
            oldState := State;
        END_IF;
        IF NOT (iButton_Index OR iButton_Aux) THEN
            bManual_Field_Buttons := true;
        END_IF;
        IF oMotor_Rollers_Fwd AND NOT bOld_Fwd THEN
            bManual_HMI_Fwd := true;
        ELSIF bOld_Fwd AND NOT oMotor_Rollers_Fwd THEN
            bManual_HMI_Fwd := false;
        END_IF;
        IF oMotor_Rollers_Rev AND NOT bOld_Rev THEN
            bManual_HMI_Rev := true;
        ELSIF bOld_Rev AND NOT oMotor_Rollers_Rev THEN
            bManual_HMI_Rev := false;
        END_IF;
        oMotor_Rollers_Fwd := bManual_HMI_Fwd OR (iButton_Index AND bManual_Field_Buttons);
        oMotor_Rollers_Rev := bManual_HMI_Rev OR (iButton_Aux AND bManual_Field_Buttons);
        bOld_Fwd := oMotor_Rollers_Fwd;
        bOld_Rev := oMotor_Rollers_Rev;
        IF NOT iManual_Mode_Req THEN
            State := 0; // GOTO RESET
        END_IF;
   15 : // ESTOP
        oLamp_Fault := true;
        IF iButton_EStop THEN
            bLocal_Emergency := true;
        END_IF;
        IF bLocal_Emergency THEN
            oNeigh_1 := 10;
            oNeigh_2 := 10;
            oLamp_Fault := iClock;
        END_IF;
        IF iNeigh_1 = 10 OR iNeigh_2 = 10 THEN
            bNeighbour_Emergency := true;
        END_IF;
        Blower_Turn := false;
        Blower_Activate1 := false;
        Blower_Activate2 := false;
        //Piston_Large_Up := true;
        //Piston_Large_Down := false;
        IF NOT iEStop_Global THEN
            IF bLocal_Emergency OR bNeighbour_Emergency THEN
                State := 0; // GOTO RESET
            ELSE
                IF tTimer.ET > t#0s AND oMotor_Rollers_Fwd THEN
                    IF tTimer.ET > t#0.5s THEN
                        tTimer.ET := tTimer.ET - t#0.5s;
                    ELSE
                        tTimer.ET := t#0s;
                    END_IF;
                END_IF;
                State := oldState;
            END_IF;
        END_IF;
   19 : // VSD Trip
        IF oldState <> State THEN
            oNeigh_1 := 9;
            oNeigh_2 := 9;
            oLamp_Fault := true;
        oldState := State;
        END_IF;
        IF iVSD_Rollers_Ready THEN
            State := 0; // GOTO RESET
        END_IF;
END_CASE;

(* Generate Momentary Obstruction Alarm *)
IF tMomentary.Q THEN
    Momentary_obstruction := false;
END_IF;
tMomentary(IN := Momentary_obstruction, PT := t#2s);
oAlarms[1] := Momentary_obstruction;    // Generate HMI Alarm 2
;
END_FUNCTION_BLOCK

